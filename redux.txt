1. createAction => Action Creator + Action types

2. createReducer => It's the easiest way of creating Redux reducer functions

3. CreateSlice => createAction + createReducer to generate actions and reducer

4. createAsyncThunk => Handle Async Actions (redux-thunk)

5. configureStore => Easiest way to create redux store

===>

1. createAction

-> it combines action type constants and the action together to create action Creator
-> The action creator can be called with or without a payload
-> By default it accepts one parameter (action type) but can customized
-> action type is a required as a parameter

2. Reducer =>  A reducer is a function that recieves the current state and an action object , decides how to update the state base on the actuin , and returns the new state
  
  -> rule of reducer :-
       => The new state value should only be calculates based on the state and action arguments 
       => Reducers are not allowed to modify the existing state

3. createReducer 

-> It's the easiest way to creating Redux reducer functions
-> we can directly mutate the data because it uses immer internally
-> It doesn't use switch or case statement
-> There are two types of creating reducers (builder callback or map object notation)

4. createSlice 

-> it simplifies the creation of action creators and reducers
-> createSlice = createAction + createReducer
-> it doesn't use switch or case statement
-> Each slice reducer "owns" its state independently
-> this Api is standard approch for writing redux logic

                           -> name
          createSlice =    -> intialState 
                           -> reducer/extraReducer

     -> name = is used in action types , and it must be unique ,it represent a particular reducer in the state
     -> reducer = it handle specific action type/implement business logic